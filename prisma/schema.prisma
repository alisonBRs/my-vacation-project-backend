// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Message{
id String @id @unique @default(uuid())
message String?
chat Chats? @relation(fields: [chatId],references: [id], onDelete: Cascade,onUpdate: Cascade)
user User? @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
userId String?
chatId String?
createdAt DateTime
@@map("message")
}

model Chats {
  id String @id @unique @default(uuid())
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId String?
  message Message[]  
  openned Boolean?
  phone String?
  name String?  
  receiverUserId String 
  userRelation RelationChats[] 
  createdAt DateTime
  @@map("chats")
}

model User {
  id String @id @unique @default(uuid())
  chats Chats[]
  message Message[]
  email String @unique
  password String 
  name String
  phone String?
  relationChats RelationChats[]
  createdAt DateTime
}

model RelationChats{
  id String @id @unique @default(uuid())
  chat Chats? @relation(fields: [chatId],references: [id], onDelete: Cascade,onUpdate: Cascade)
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  receiverChatId String?
  userId String?
  chatId String?
  @@map("relation_chats")
}